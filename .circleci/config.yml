version: 2.1
executors:
   app-executor:
    docker:
      - image: cimg/node:14.18.2
    working_directory: ~/deploy_formio
aliases:
  - &show-current-branch-name
    run:
      name: show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      key: dependency-cache-{{ checksum "package.json" }}
  - &install-dependencies
    run:
      name: Install npm modules
      command: npm install
  - &save-cache
    save_cache:
      key: dependency-cache-{{ checksum "package.json" }}
      paths:
        - node_modules
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      command: |
        sudo apt-get update
        sudo apt install -y awscli
  - &setup-remote-docker
    setup_remote_docker:
      version: 20.10.11
      docker_layer_caching: true
  - &ssh-remote-docker
    run: |
      ssh remote-docker \<<EOF
        sudo bash -c 'echo "{\"experimental\": true}" > /etc/docker/daemon.json'
        sudo service docker restart
      EOF

parameters:
  enterprise_version:
    type: string
    default: ""
  pdf_version:
    type: string
    default: ""
  S3bucket_name:
    type: string
    default: ""
  s3_key:
    type: string
    default: ""
  app_version_name:
    type: string
    default: ""
  version_label:
    type: string
    default: ""
  ebstalk_env_name:
    type: string
    default: ""
  
jobs:
  build-deploy-app:
    executor: app-executor
    environment:
      ENTERPRISE_VERSION: "<< pipeline.parameters.enterprise_version >>"
      PDF_VERSION: "<< pipeline.parameters.pdf_version >>"
      S3BUCKET_NAME: "<< pipeline.parameters.S3bucket_name >>" 
      S3_KEY: "<< pipeline.parameters.s3_key >>"
      APP_VERSION_NAME: "<< pipeline.parameters.app_version_name >>"
      VERSION_LABEL: "<< pipeline.parameters.version_label >>"
      EBSTALK_ENV_NAME: "<< pipeline.parameters.ebstalk_env_name >>"
    steps:
      - run: echo "API Server version is ${ENTERPRISE_VERSION}"
      - run: echo "PDF server version is ${PDF_VERSION}"
      - run: echo "S3 bucket name is ${S3BUCKET_NAME}"
      - run: echo "S3 bucket key is ${S3_KEY}"
      - run: echo "Application version name is ${APP_VERSION_NAME}"
      - run: echo "Version label is ${VERSION_LABEL}"
      - run: echo "Elastic Beanstalk environment name is ${EBSTALK_ENV_NAME}"
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies   
      - *save-cache
      - *install-aws-cli
      - *setup-remote-docker
      - *ssh-remote-docker
      - run:
          name: Build deploy package
          command: node index package compose/aws/${S3_KEY} --license=${MYLICENSE} --version=${ENTERPRISE_VERSION} --pdf-version=${PDF_VERSION}
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  deploy-to-s3-bucket:
    executor: app-executor
    environment:
      ENTERPRISE_VERSION: "<< pipeline.parameters.enterprise_version >>"
      PDF_VERSION: "<< pipeline.parameters.pdf_version >>"
      S3BUCKET_NAME: "<< pipeline.parameters.S3bucket_name >>" 
    steps:
      - run: echo "API Server version is ${ENTERPRISE_VERSION}"
      - run: echo "PDF server version is ${PDF_VERSION}"
      - run: echo "S3 bucket key is ${S3_KEY}"
      - run: echo "S3 bucket name is ${S3BUCKET_NAME}"
      - checkout
      - attach_workspace:
          at: ./ 
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies   
      - *save-cache
      - *install-aws-cli
      - run:
          name: Deploy app to s3 bucket
          command: aws --region ${AWS_REGION} s3 cp ./deployments/compose/aws/${S3_KEY} s3://${S3BUCKET_NAME} 
  deploy-app-version-to-EB:
    executor: app-executor
    environment:
      S3BUCKET_NAME: "<< pipeline.parameters.S3bucket_name >>" 
      S3_KEY: "<< pipeline.parameters.s3_key >>"
      APP_VERSION_NAME: "<< pipeline.parameters.app_version_name >>"
      VERSION_LABEL: "<< pipeline.parameters.version_label >>"
    steps:
      - run: echo "S3 bucket name is ${S3BUCKET_NAME}"
      - run: echo "S3 bucket key is ${S3_KEY}"
      - run: echo "Application version name is ${APP_VERSION_NAME}"
      - run: echo "Version label is ${VERSION_LABEL}"
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies   
      - *save-cache
      - *install-aws-cli
      - run:
          name: Upload application version to elastic beanstalk
          command: aws --region ${AWS_REGION} elasticbeanstalk create-application-version --application-name ${APP_VERSION_NAME} --version-label ${VERSION_LABEL} --source-bundle S3Bucket="${S3BUCKET_NAME}",S3Key="${S3_KEY}"
  deploy-app-version-to-EB Environment:
    executor: app-executor
    environment:
      VERSION_LABEL: "<< pipeline.parameters.version_label >>"
      EBSTALK_ENV_NAME: "<< pipeline.parameters.ebstalk_env_name >>" 
    steps:
      - run: echo "Version label is ${VERSION_LABEL}"
      - run: echo "Elastic Beanstalk environment name is ${EBSTALK_ENV_NAME}"
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies   
      - *save-cache
      - *install-aws-cli
      - run: 
          name: Upload application version to EB Environment
          command: aws --region ${AWS_REGION} elasticbeanstalk update-environment --environment-name ${EBSTALK_ENV_NAME} --version-label ${VERSION_LABEL}

workflows:
   deploy-formio-app:
    jobs:
      - build-deploy-app
      - deploy-to-s3-bucket:
          requires:
            - build-deploy-app
          filters:
            branches:
              only:
                - main
                - test_deploy_formio
      - deploy-app-version-to-EB:
          requires:
            - deploy-to-s3-bucket
          filters:
            branches:
              only:
                - main
                - test_deploy_formio
      - hold:
          type: approval
          requires:
            - deploy-app-version-to-EB
      - deploy-app-version-to-EB Environment:
          requires:
            - hold
          filters:
            branches:
              only:
                - main
                - test_deploy_formio


